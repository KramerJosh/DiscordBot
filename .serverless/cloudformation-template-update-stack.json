{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "ReadDashfromDashtopicLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/slackbot-dev-read-from-topic"
      }
    },
    "PostDashmessageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/slackbot-dev-post-message"
      }
    },
    "SlackbotLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/slackbot-dev-slackbot"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "slackbot",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/slackbot-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/slackbot-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:*"
                  ],
                  "Resource": "arn:aws:sns:us-east-1:481665087818:ALERT_NOTIFICATIONS"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "slackbot",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "ReadDashfromDashtopicLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/slackbot/dev/1742748838992-2025-03-23T16:53:58.992Z/slackbot.zip"
        },
        "Handler": "src/readFromTopic.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "slackbot-dev-read-from-topic",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "MONGODB_URI": "mongodb+srv://kramerjoshkramerjosh:roXVCLv1MUtfb1Tv@cluster0.ydmxy.mongodb.net/aws_test?retryWrites=true&w=majority&appName=Cluster0",
            "SLACK_URL": "https://hooks.slack.com/services/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"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ReadDashfromDashtopicLogGroup"
      ]
    },
    "PostDashmessageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/slackbot/dev/1742748838992-2025-03-23T16:53:58.992Z/slackbot.zip"
        },
        "Handler": "src/postToTopic.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "slackbot-dev-post-message",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "MONGODB_URI": "mongodb+srv://kramerjoshkramerjosh:roXVCLv1MUtfb1Tv@cluster0.ydmxy.mongodb.net/aws_test?retryWrites=true&w=majority&appName=Cluster0",
            "SLACK_URL": "https://hooks.slack.com/services/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"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PostDashmessageLogGroup"
      ]
    },
    "SlackbotLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/slackbot/dev/1742748838992-2025-03-23T16:53:58.992Z/slackbot.zip"
        },
        "Handler": "src/postToSlack.handler",
        "Runtime": "nodejs20.x",
        "FunctionName": "slackbot-dev-slackbot",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "MONGODB_URI": "mongodb+srv://kramerjoshkramerjosh:roXVCLv1MUtfb1Tv@cluster0.ydmxy.mongodb.net/aws_test?retryWrites=true&w=majority&appName=Cluster0",
            "SLACK_URL": "https://hooks.slack.com/services/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"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SlackbotLogGroup"
      ]
    },
    "ReadDashfromDashtopicLambdaVersionrHAbVSAK62uZxAdnVtxJc524GESBTbIgMhCFKcmc8o": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ReadDashfromDashtopicLambdaFunction"
        },
        "CodeSha256": "bWoMPzNgTcotaLGbZbkwrXGVGJUV06pJdgA5sTY+AFA="
      }
    },
    "PostDashmessageLambdaVersionyKLmHrrZUmHhcb9JdFtrWrRaK6THDU1GVg9pJgR8gok": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostDashmessageLambdaFunction"
        },
        "CodeSha256": "bWoMPzNgTcotaLGbZbkwrXGVGJUV06pJdgA5sTY+AFA="
      }
    },
    "SlackbotLambdaVersiono0PIbGBpx7PxeUObOE2hBdpwWc80xiNVzr9SM4Df8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SlackbotLambdaFunction"
        },
        "CodeSha256": "bWoMPzNgTcotaLGbZbkwrXGVGJUV06pJdgA5sTY+AFA="
      }
    },
    "ReadDashfromDashtopicSnsSubscriptionALERTNOTIFICATIONS": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": "arn:aws:sns:us-east-1:481665087818:ALERT_NOTIFICATIONS",
        "Protocol": "lambda",
        "Endpoint": {
          "Fn::GetAtt": [
            "ReadDashfromDashtopicLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "ReadDashfromDashtopicLambdaPermissionALERTNOTIFICATIONSSNS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ReadDashfromDashtopicLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": "arn:aws:sns:us-east-1:481665087818:ALERT_NOTIFICATIONS"
      }
    },
    "SlackbotSnsSubscriptionALERTNOTIFICATIONS": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": "arn:aws:sns:us-east-1:481665087818:ALERT_NOTIFICATIONS",
        "Protocol": "lambda",
        "Endpoint": {
          "Fn::GetAtt": [
            "SlackbotLambdaFunction",
            "Arn"
          ]
        }
      }
    },
    "SlackbotLambdaPermissionALERTNOTIFICATIONSSNS": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SlackbotLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "sns.amazonaws.com",
        "SourceArn": "arn:aws:sns:us-east-1:481665087818:ALERT_NOTIFICATIONS"
      }
    },
    "HttpApi": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "Name": "dev-slackbot",
        "ProtocolType": "HTTP"
      }
    },
    "HttpApiStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "StageName": "$default",
        "AutoDeploy": true,
        "DefaultRouteSettings": {
          "DetailedMetricsEnabled": false
        }
      }
    },
    "PostDashmessageLambdaPermissionHttpApi": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostDashmessageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "HttpApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "HttpApiIntegrationPostDashmessage": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::GetAtt": [
            "PostDashmessageLambdaFunction",
            "Arn"
          ]
        },
        "PayloadFormatVersion": "2.0",
        "TimeoutInMillis": 30000
      }
    },
    "HttpApiRoutePostPosttotopic": {
      "Type": "AWS::ApiGatewayV2::Route",
      "Properties": {
        "ApiId": {
          "Ref": "HttpApi"
        },
        "RouteKey": "POST /posttotopic",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "HttpApiIntegrationPostDashmessage"
              }
            ]
          ]
        }
      },
      "DependsOn": "HttpApiIntegrationPostDashmessage"
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-slackbot-dev-ServerlessDeploymentBucketName"
      }
    },
    "ReadDashfromDashtopicLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ReadDashfromDashtopicLambdaVersionrHAbVSAK62uZxAdnVtxJc524GESBTbIgMhCFKcmc8o"
      },
      "Export": {
        "Name": "sls-slackbot-dev-ReadDashfromDashtopicLambdaFunctionQualifiedArn"
      }
    },
    "PostDashmessageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostDashmessageLambdaVersionyKLmHrrZUmHhcb9JdFtrWrRaK6THDU1GVg9pJgR8gok"
      },
      "Export": {
        "Name": "sls-slackbot-dev-PostDashmessageLambdaFunctionQualifiedArn"
      }
    },
    "SlackbotLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SlackbotLambdaVersiono0PIbGBpx7PxeUObOE2hBdpwWc80xiNVzr9SM4Df8"
      },
      "Export": {
        "Name": "sls-slackbot-dev-SlackbotLambdaFunctionQualifiedArn"
      }
    },
    "HttpApiId": {
      "Description": "Id of the HTTP API",
      "Value": {
        "Ref": "HttpApi"
      },
      "Export": {
        "Name": "sls-slackbot-dev-HttpApiId"
      }
    },
    "HttpApiUrl": {
      "Description": "URL of the HTTP API",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "HttpApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            }
          ]
        ]
      },
      "Export": {
        "Name": "sls-slackbot-dev-HttpApiUrl"
      }
    }
  }
}